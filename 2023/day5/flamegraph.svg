<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="1574848"><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (456 samples, 0.03%)</title><rect x="0.0000%" y="373" width="0.0290%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="456"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (34,763 samples, 2.21%)</title><rect x="0.0290%" y="357" width="2.2074%" height="15" fill="rgb(217,0,24)" fg:x="456" fg:w="34763"/><text x="0.2790%" y="367.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,460 samples, 0.09%)</title><rect x="2.2363%" y="357" width="0.0927%" height="15" fill="rgb(221,193,54)" fg:x="35219" fg:w="1460"/><text x="2.4863%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (232 samples, 0.01%)</title><rect x="2.3296%" y="357" width="0.0147%" height="15" fill="rgb(248,212,6)" fg:x="36687" fg:w="232"/><text x="2.5796%" y="367.50"></text></g><g><title>part2::Almanac::get_seed_loc (3,247 samples, 0.21%)</title><rect x="2.3443%" y="357" width="0.2062%" height="15" fill="rgb(208,68,35)" fg:x="36919" fg:w="3247"/><text x="2.5943%" y="367.50"></text></g><g><title>part2::Entry::get_next (7,146 samples, 0.45%)</title><rect x="2.5505%" y="357" width="0.4538%" height="15" fill="rgb(232,128,0)" fg:x="40166" fg:w="7146"/><text x="2.8005%" y="367.50"></text></g><g><title>part2::Map::get_next (2,278 samples, 0.14%)</title><rect x="3.0042%" y="357" width="0.1446%" height="15" fill="rgb(207,160,47)" fg:x="47312" fg:w="2278"/><text x="3.2542%" y="367.50"></text></g><g><title>[[heap]] (84,675 samples, 5.38%)</title><rect x="0.0290%" y="373" width="5.3767%" height="15" fill="rgb(228,23,34)" fg:x="456" fg:w="84675"/><text x="0.2790%" y="383.50">[[heap]]</text></g><g><title>part2::Map::get_next::_{{closure}} (35,541 samples, 2.26%)</title><rect x="3.1489%" y="357" width="2.2568%" height="15" fill="rgb(218,30,26)" fg:x="49590" fg:w="35541"/><text x="3.3989%" y="367.50">p..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (379 samples, 0.02%)</title><rect x="5.4100%" y="357" width="0.0241%" height="15" fill="rgb(220,122,19)" fg:x="85199" fg:w="379"/><text x="5.6600%" y="367.50"></text></g><g><title>core::cmp::Ord::min (168 samples, 0.01%)</title><rect x="5.4340%" y="357" width="0.0107%" height="15" fill="rgb(250,228,42)" fg:x="85578" fg:w="168"/><text x="5.6840%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (212 samples, 0.01%)</title><rect x="5.4447%" y="357" width="0.0135%" height="15" fill="rgb(240,193,28)" fg:x="85746" fg:w="212"/><text x="5.6947%" y="367.50"></text></g><g><title>core::cmp::min_by (453 samples, 0.03%)</title><rect x="5.4582%" y="357" width="0.0288%" height="15" fill="rgb(216,20,37)" fg:x="85958" fg:w="453"/><text x="5.7082%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (193 samples, 0.01%)</title><rect x="5.4747%" y="341" width="0.0123%" height="15" fill="rgb(206,188,39)" fg:x="86218" fg:w="193"/><text x="5.7247%" y="351.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (193 samples, 0.01%)</title><rect x="5.4747%" y="325" width="0.0123%" height="15" fill="rgb(217,207,13)" fg:x="86218" fg:w="193"/><text x="5.7247%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (221 samples, 0.01%)</title><rect x="5.4869%" y="357" width="0.0140%" height="15" fill="rgb(231,73,38)" fg:x="86411" fg:w="221"/><text x="5.7369%" y="367.50"></text></g><g><title>[anon] (1,581 samples, 0.10%)</title><rect x="5.4057%" y="373" width="0.1004%" height="15" fill="rgb(225,20,46)" fg:x="85131" fg:w="1581"/><text x="5.6557%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,222 samples, 0.14%)</title><rect x="5.7964%" y="133" width="0.1411%" height="15" fill="rgb(210,31,41)" fg:x="91284" fg:w="2222"/><text x="6.0464%" y="143.50"></text></g><g><title>core::cmp::Ord::min (6,282 samples, 0.40%)</title><rect x="5.9375%" y="133" width="0.3989%" height="15" fill="rgb(221,200,47)" fg:x="93506" fg:w="6282"/><text x="6.1875%" y="143.50"></text></g><g><title>core::cmp::min_by (6,143 samples, 0.39%)</title><rect x="5.9463%" y="117" width="0.3901%" height="15" fill="rgb(226,26,5)" fg:x="93645" fg:w="6143"/><text x="6.1963%" y="127.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,706 samples, 0.17%)</title><rect x="6.1645%" y="101" width="0.1718%" height="15" fill="rgb(249,33,26)" fg:x="97082" fg:w="2706"/><text x="6.4145%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1,553 samples, 0.10%)</title><rect x="6.2377%" y="85" width="0.0986%" height="15" fill="rgb(235,183,28)" fg:x="98235" fg:w="1553"/><text x="6.4877%" y="95.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (327 samples, 0.02%)</title><rect x="6.4587%" y="101" width="0.0208%" height="15" fill="rgb(221,5,38)" fg:x="101714" fg:w="327"/><text x="6.7087%" y="111.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,257 samples, 0.14%)</title><rect x="6.3364%" y="133" width="0.1433%" height="15" fill="rgb(247,18,42)" fg:x="99788" fg:w="2257"/><text x="6.5864%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,253 samples, 0.14%)</title><rect x="6.3366%" y="117" width="0.1431%" height="15" fill="rgb(241,131,45)" fg:x="99792" fg:w="2253"/><text x="6.5866%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (681 samples, 0.04%)</title><rect x="7.3707%" y="85" width="0.0432%" height="15" fill="rgb(249,31,29)" fg:x="116077" fg:w="681"/><text x="7.6207%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (413 samples, 0.03%)</title><rect x="7.3877%" y="69" width="0.0262%" height="15" fill="rgb(225,111,53)" fg:x="116345" fg:w="413"/><text x="7.6377%" y="79.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (253 samples, 0.02%)</title><rect x="7.3979%" y="53" width="0.0161%" height="15" fill="rgb(238,160,17)" fg:x="116505" fg:w="253"/><text x="7.6479%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (274 samples, 0.02%)</title><rect x="7.4353%" y="53" width="0.0174%" height="15" fill="rgb(214,148,48)" fg:x="117095" fg:w="274"/><text x="7.6853%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts (2,201 samples, 0.14%)</title><rect x="7.4353%" y="69" width="0.1398%" height="15" fill="rgb(232,36,49)" fg:x="117095" fg:w="2201"/><text x="7.6853%" y="79.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1,927 samples, 0.12%)</title><rect x="7.4527%" y="53" width="0.1224%" height="15" fill="rgb(209,103,24)" fg:x="117369" fg:w="1927"/><text x="7.7027%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3,621 samples, 0.23%)</title><rect x="7.3587%" y="101" width="0.2299%" height="15" fill="rgb(229,88,8)" fg:x="115888" fg:w="3621"/><text x="7.6087%" y="111.50"></text></g><g><title>core::slice::raw::from_raw_parts (2,751 samples, 0.17%)</title><rect x="7.4139%" y="85" width="0.1747%" height="15" fill="rgb(213,181,19)" fg:x="116758" fg:w="2751"/><text x="7.6639%" y="95.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (213 samples, 0.01%)</title><rect x="7.5751%" y="69" width="0.0135%" height="15" fill="rgb(254,191,54)" fg:x="119296" fg:w="213"/><text x="7.8251%" y="79.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (213 samples, 0.01%)</title><rect x="7.5751%" y="53" width="0.0135%" height="15" fill="rgb(241,83,37)" fg:x="119296" fg:w="213"/><text x="7.8251%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (697 samples, 0.04%)</title><rect x="7.6439%" y="69" width="0.0443%" height="15" fill="rgb(233,36,39)" fg:x="120380" fg:w="697"/><text x="7.8939%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (229 samples, 0.01%)</title><rect x="7.6882%" y="69" width="0.0145%" height="15" fill="rgb(226,3,54)" fg:x="121077" fg:w="229"/><text x="7.9382%" y="79.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,857 samples, 0.37%)</title><rect x="7.3411%" y="117" width="0.3719%" height="15" fill="rgb(245,192,40)" fg:x="115611" fg:w="5857"/><text x="7.5911%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1,959 samples, 0.12%)</title><rect x="7.5886%" y="101" width="0.1244%" height="15" fill="rgb(238,167,29)" fg:x="119509" fg:w="1959"/><text x="7.8386%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1,959 samples, 0.12%)</title><rect x="7.5886%" y="85" width="0.1244%" height="15" fill="rgb(232,182,51)" fg:x="119509" fg:w="1959"/><text x="7.8386%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (162 samples, 0.01%)</title><rect x="7.7027%" y="69" width="0.0103%" height="15" fill="rgb(231,60,39)" fg:x="121306" fg:w="162"/><text x="7.9527%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (5,256 samples, 0.33%)</title><rect x="8.9228%" y="101" width="0.3337%" height="15" fill="rgb(208,69,12)" fg:x="140520" fg:w="5256"/><text x="9.1728%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32,440 samples, 2.06%)</title><rect x="7.7130%" y="117" width="2.0599%" height="15" fill="rgb(235,93,37)" fg:x="121468" fg:w="32440"/><text x="7.9630%" y="127.50">&lt;..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (8,132 samples, 0.52%)</title><rect x="9.2565%" y="101" width="0.5164%" height="15" fill="rgb(213,116,39)" fg:x="145776" fg:w="8132"/><text x="9.5065%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,036 samples, 0.07%)</title><rect x="9.7071%" y="85" width="0.0658%" height="15" fill="rgb(222,207,29)" fg:x="152872" fg:w="1036"/><text x="9.9571%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (739 samples, 0.05%)</title><rect x="9.7260%" y="69" width="0.0469%" height="15" fill="rgb(206,96,30)" fg:x="153169" fg:w="739"/><text x="9.9760%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (10,878 samples, 0.69%)</title><rect x="9.7729%" y="117" width="0.6907%" height="15" fill="rgb(218,138,4)" fg:x="153908" fg:w="10878"/><text x="10.0229%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5,300 samples, 0.34%)</title><rect x="10.9534%" y="85" width="0.3365%" height="15" fill="rgb(250,191,14)" fg:x="172499" fg:w="5300"/><text x="11.2034%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,930 samples, 0.19%)</title><rect x="11.1039%" y="69" width="0.1860%" height="15" fill="rgb(239,60,40)" fg:x="174869" fg:w="2930"/><text x="11.3539%" y="79.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (928 samples, 0.06%)</title><rect x="11.2310%" y="53" width="0.0589%" height="15" fill="rgb(206,27,48)" fg:x="176871" fg:w="928"/><text x="11.4810%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (891 samples, 0.06%)</title><rect x="11.2899%" y="53" width="0.0566%" height="15" fill="rgb(225,35,8)" fg:x="177799" fg:w="891"/><text x="11.5399%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts (10,004 samples, 0.64%)</title><rect x="11.2899%" y="69" width="0.6352%" height="15" fill="rgb(250,213,24)" fg:x="177799" fg:w="10004"/><text x="11.5399%" y="79.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (9,113 samples, 0.58%)</title><rect x="11.3465%" y="53" width="0.5787%" height="15" fill="rgb(247,123,22)" fg:x="178690" fg:w="9113"/><text x="11.5965%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17,668 samples, 1.12%)</title><rect x="10.8641%" y="101" width="1.1219%" height="15" fill="rgb(231,138,38)" fg:x="171093" fg:w="17668"/><text x="11.1141%" y="111.50"></text></g><g><title>core::slice::raw::from_raw_parts (10,962 samples, 0.70%)</title><rect x="11.2899%" y="85" width="0.6961%" height="15" fill="rgb(231,145,46)" fg:x="177799" fg:w="10962"/><text x="11.5399%" y="95.50"></text></g><g><title>core::slice::raw::from_raw_parts::runtime (958 samples, 0.06%)</title><rect x="11.9252%" y="69" width="0.0608%" height="15" fill="rgb(251,118,11)" fg:x="187803" fg:w="958"/><text x="12.1752%" y="79.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (958 samples, 0.06%)</title><rect x="11.9252%" y="53" width="0.0608%" height="15" fill="rgb(217,147,25)" fg:x="187803" fg:w="958"/><text x="12.1752%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (35,889 samples, 2.28%)</title><rect x="45.4509%" y="69" width="2.2789%" height="15" fill="rgb(247,81,37)" fg:x="715782" fg:w="35889"/><text x="45.7009%" y="79.50">c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (342,750 samples, 21.76%)</title><rect x="33.6751%" y="85" width="21.7640%" height="15" fill="rgb(209,12,38)" fg:x="530332" fg:w="342750"/><text x="33.9251%" y="95.50">&lt;core::slice::iter::Iter&lt;T&gt; as cor..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (121,411 samples, 7.71%)</title><rect x="47.7297%" y="69" width="7.7094%" height="15" fill="rgb(227,1,9)" fg:x="751671" fg:w="121411"/><text x="47.9797%" y="79.50">core::slice..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (9,660 samples, 0.61%)</title><rect x="54.8257%" y="53" width="0.6134%" height="15" fill="rgb(248,47,43)" fg:x="863422" fg:w="9660"/><text x="55.0757%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (7,601 samples, 0.48%)</title><rect x="54.9565%" y="37" width="0.4826%" height="15" fill="rgb(221,10,30)" fg:x="865481" fg:w="7601"/><text x="55.2065%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (1,330,262 samples, 84.47%)</title><rect x="11.9860%" y="101" width="84.4692%" height="15" fill="rgb(210,229,1)" fg:x="188761" fg:w="1330262"/><text x="12.2360%" y="111.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map</text></g><g><title>part2::Map::get_next::_{{closure}} (645,941 samples, 41.02%)</title><rect x="55.4391%" y="85" width="41.0161%" height="15" fill="rgb(222,148,37)" fg:x="873082" fg:w="645941"/><text x="55.6891%" y="95.50">part2::Map::get_next::_{{closure}}</text></g><g><title>part2::Entry::get_next (565,349 samples, 35.90%)</title><rect x="60.5566%" y="69" width="35.8986%" height="15" fill="rgb(234,67,33)" fg:x="953674" fg:w="565349"/><text x="60.8066%" y="79.50">part2::Entry::get_next</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4,765 samples, 0.30%)</title><rect x="97.2395%" y="69" width="0.3026%" height="15" fill="rgb(247,98,35)" fg:x="1531375" fg:w="4765"/><text x="97.4895%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1,438 samples, 0.09%)</title><rect x="97.5421%" y="69" width="0.0913%" height="15" fill="rgb(247,138,52)" fg:x="1536140" fg:w="1438"/><text x="97.7921%" y="79.50"></text></g><g><title>[libc.so.6] (1,451,906 samples, 92.19%)</title><rect x="5.5064%" y="373" width="92.1934%" height="15" fill="rgb(213,79,30)" fg:x="86718" fg:w="1451906"/><text x="5.7564%" y="383.50">[libc.so.6]</text></g><g><title>[libc.so.6] (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="357" width="92.1932%" height="15" fill="rgb(246,177,23)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="367.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="341" width="92.1932%" height="15" fill="rgb(230,62,27)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="351.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="325" width="92.1932%" height="15" fill="rgb(216,154,8)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="335.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="309" width="92.1932%" height="15" fill="rgb(244,35,45)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="319.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="293" width="92.1932%" height="15" fill="rgb(251,115,12)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="303.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="277" width="92.1932%" height="15" fill="rgb(240,54,50)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="287.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="261" width="92.1932%" height="15" fill="rgb(233,84,52)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="271.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="245" width="92.1932%" height="15" fill="rgb(207,117,47)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="255.50">std::panicking::try</text></g><g><title>__rust_try (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="229" width="92.1932%" height="15" fill="rgb(249,43,39)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="239.50">__rust_try</text></g><g><title>std::panicking::try::do_call (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="213" width="92.1932%" height="15" fill="rgb(209,38,44)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="223.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="197" width="92.1932%" height="15" fill="rgb(236,212,23)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="207.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="181" width="92.1932%" height="15" fill="rgb(242,79,21)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="191.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="165" width="92.1932%" height="15" fill="rgb(211,96,35)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="175.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>part2::main::_{{closure}} (1,451,902 samples, 92.19%)</title><rect x="5.5067%" y="149" width="92.1932%" height="15" fill="rgb(253,215,40)" fg:x="86722" fg:w="1451902"/><text x="5.7567%" y="159.50">part2::main::_{{closure}}</text></g><g><title>part2::Almanac::get_seed_loc (1,436,579 samples, 91.22%)</title><rect x="6.4797%" y="133" width="91.2202%" height="15" fill="rgb(211,81,21)" fg:x="102045" fg:w="1436579"/><text x="6.7297%" y="143.50">part2::Almanac::get_seed_loc</text></g><g><title>part2::Map::get_next (1,373,838 samples, 87.24%)</title><rect x="10.4636%" y="117" width="87.2362%" height="15" fill="rgb(208,190,38)" fg:x="164786" fg:w="1373838"/><text x="10.7136%" y="127.50">part2::Map::get_next</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (19,601 samples, 1.24%)</title><rect x="96.4552%" y="101" width="1.2446%" height="15" fill="rgb(235,213,38)" fg:x="1519023" fg:w="19601"/><text x="96.7052%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (13,140 samples, 0.83%)</title><rect x="96.8655%" y="85" width="0.8344%" height="15" fill="rgb(237,122,38)" fg:x="1525484" fg:w="13140"/><text x="97.1155%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1,046 samples, 0.07%)</title><rect x="97.6334%" y="69" width="0.0664%" height="15" fill="rgb(244,218,35)" fg:x="1537578" fg:w="1046"/><text x="97.8834%" y="79.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (159 samples, 0.01%)</title><rect x="97.7018%" y="357" width="0.0101%" height="15" fill="rgb(240,68,47)" fg:x="1538655" fg:w="159"/><text x="97.9518%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (1,545 samples, 0.10%)</title><rect x="97.7119%" y="357" width="0.0981%" height="15" fill="rgb(210,16,53)" fg:x="1538814" fg:w="1545"/><text x="97.9619%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,891 samples, 0.18%)</title><rect x="97.8100%" y="357" width="0.1836%" height="15" fill="rgb(235,124,12)" fg:x="1540359" fg:w="2891"/><text x="98.0600%" y="367.50"></text></g><g><title>core::cmp::Ord::min (417 samples, 0.03%)</title><rect x="98.0004%" y="357" width="0.0265%" height="15" fill="rgb(224,169,11)" fg:x="1543357" fg:w="417"/><text x="98.2504%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (197 samples, 0.01%)</title><rect x="98.0286%" y="357" width="0.0125%" height="15" fill="rgb(250,166,2)" fg:x="1543802" fg:w="197"/><text x="98.2786%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (175 samples, 0.01%)</title><rect x="98.0411%" y="357" width="0.0111%" height="15" fill="rgb(242,216,29)" fg:x="1543999" fg:w="175"/><text x="98.2911%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1,022 samples, 0.06%)</title><rect x="98.0523%" y="357" width="0.0649%" height="15" fill="rgb(230,116,27)" fg:x="1544174" fg:w="1022"/><text x="98.3023%" y="367.50"></text></g><g><title>part2::Almanac::get_seed_loc (211 samples, 0.01%)</title><rect x="98.1174%" y="357" width="0.0134%" height="15" fill="rgb(228,99,48)" fg:x="1545200" fg:w="211"/><text x="98.3674%" y="367.50"></text></g><g><title>part2::Map::get_next (1,516 samples, 0.10%)</title><rect x="98.1308%" y="357" width="0.0963%" height="15" fill="rgb(253,11,6)" fg:x="1545411" fg:w="1516"/><text x="98.3808%" y="367.50"></text></g><g><title>part2::Map::get_next::_{{closure}} (26,399 samples, 1.68%)</title><rect x="98.2271%" y="357" width="1.6763%" height="15" fill="rgb(247,143,39)" fg:x="1546927" fg:w="26399"/><text x="98.4771%" y="367.50"></text></g><g><title>[unknown] (35,305 samples, 2.24%)</title><rect x="97.6998%" y="373" width="2.2418%" height="15" fill="rgb(236,97,10)" fg:x="1538624" fg:w="35305"/><text x="97.9498%" y="383.50">[..</text></g><g><title>part2::main::_{{closure}} (603 samples, 0.04%)</title><rect x="99.9034%" y="357" width="0.0383%" height="15" fill="rgb(233,208,19)" fg:x="1573326" fg:w="603"/><text x="100.1534%" y="367.50"></text></g><g><title>all (1,574,848 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="1574848"/><text x="0.2500%" y="415.50"></text></g><g><title>part2 (1,574,848 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="1574848"/><text x="0.2500%" y="399.50">part2</text></g><g><title>part2::Map::get_next::_{{closure}} (918 samples, 0.06%)</title><rect x="99.9417%" y="373" width="0.0583%" height="15" fill="rgb(242,17,10)" fg:x="1573930" fg:w="918"/><text x="100.1917%" y="383.50"></text></g></svg></svg>